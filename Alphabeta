def get_move(self, game, time_left):
        """Search for the best move from the available legal moves and return a
        result before the time limit expires.

        Modify the get_move() method from the MinimaxPlayer class to implement
        iterative deepening search instead of fixed-depth search.

        **********************************************************************
        NOTE: If time_left() < 0 when this function returns, the agent will
              forfeit the game due to timeout. You must return _before_ the
              timer reaches 0.
        **********************************************************************

        Parameters
        ----------
        game : `isolation.Board`
            An instance of `isolation.Board` encoding the current state of the
            game (e.g., player locations and blocked cells).

        time_left : callable
            A function that returns the number of milliseconds left in the
            current turn. Returning with any less than 0 ms remaining forfeits
            the game.

        Returns
        -------
        (int, int)
            Board coordinates corresponding to a legal move; may return
            (-1, -1) if there are no available legal moves.
        """
                
        self.time_left = time_left
        
               
        best_move = (-1, -1)

        depth = 1
        
                      
        while True:
            #print('while')
            try:
                #print('dep', depth)
                best_move = self.alphabeta(game, depth)
                depth += 1
                #print('this is the end of while depth', depth)
            except SearchTimeout:
                break
            
        # Return the best move from the last completed search iteration
        #print('best move from get  move', best_move)
        return best_move
            

    def alphabeta(self, game, depth, alpha=float("-inf"), beta=float("inf")):
        """Implement depth-limited minimax search with alpha-beta pruning as
        described in the lectures.

        This should be a modified version of ALPHA-BETA-SEARCH in the AIMA text
        https://github.com/aimacode/aima-pseudocode/blob/master/md/Alpha-Beta-Search.md

        **********************************************************************
            You MAY add additional methods to this class, or define helper
                 functions to implement the required functionality.
        **********************************************************************

        Parameters
        ----------
        game : isolation.Board
            An instance of the Isolation game `Board` class representing the
            current game state

        depth : int
            Depth is an integer representing the maximum number of plies to
            search in the game tree before aborting

        alpha : float
            Alpha limits the lower bound of search on minimizing layers

        beta : float
            Beta limits the upper bound of search on maximizing layers

        Returns
        -------
        (int, int)
            The board coordinates of the best move found in the current search;
            (-1, -1) if there are no legal moves

        Notes
        -----
            (1) You MUST use the `self.score()` method for board evaluation
                to pass the project tests; you cannot call any other evaluation
                function directly.

            (2) If you use any helper functions (e.g., as shown in the AIMA
                pseudocode) then you must copy the timer check into the top of
                each helper function or else your agent will timeout during
                testing.
        """
        if self.time_left() < self.TIMER_THRESHOLD:
            raise SearchTimeout()

        # TODO: finish this function!
        
        best_score = float("-inf")
        best_move = None
        
        for i in game.get_legal_moves():
            v = self.minval(game.forecast_move(i), depth, alpha, beta)
            if v > best_score:
                best_score = v
                best_move = i
        #print('best move from the alphabeta function', best_move)
        alpha = max(alpha, v)
        return best_move
    
        
    def maxval(self, game, depth, alpha, beta):
        #print('max depth', depth)
        if self.time_left() < self.TIMER_THRESHOLD:
            raise SearchTimeout()
        
        if depth == 0 or not game.get_legal_moves():
            #print('move if', depth)
            return self.score(game, self)
        
        v = float("-inf")
        for i in game.get_legal_moves():
            v = max(v, self.minval(game.forecast_move(i), depth-1, alpha, beta))
        if v >= beta:
            return v
        alpha = max(alpha, v)
        return v
        
        
    def minval(self, game, depth, alpha, beta):
        #print('min depth', depth)
        if self.time_left() < self.TIMER_THRESHOLD:
            raise SearchTimeout()
           
        if depth == 0 or not game.get_legal_moves():
            return self.score(game, self)
        
        v = float("inf")
        for i in game.get_legal_moves():
            v = min(v, self.maxval(game.forecast_move(i), depth-1, alpha, beta))
        if v <= alpha:
            return v
        beta = min(beta, v)
        return v
